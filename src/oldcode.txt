
/**
   The function changes an atom index (int) into unit-cell corrdinates
   the function is based on the idea that the creation of an atom list proceeds in a predictable
   fashion. For example, if the unit cell contains 4 basis atoms, each 4 consecutive atoms will belong to the
   same unit cell, then the next four are shifted by ix, the, 2*ix, then 3*ix, and so on until the limit is reached at
   which point iy is iterated, then ix again, and so on unitl iz. In this way it is possible to change the atom id (1-D) to
   the atom fractional coordinates: ix, iy, iz, ib (4-D)
 **/
/*
void map_id_uc(int& idAtom, Eigen::Vector4i& uccAtom, Eigen::Matrix<int, 3,2>& boxUcLims, int nBasisAtoms){

  if (idAtom < 0){
    //printf("reverse mapping %i %i %i %i\n", uccAtom(0), uccAtom(1), uccAtom(2), uccAtom(3));
    //fflush(stdout);
    int Nx = boxUcLims(0,1) - boxUcLims(0,0);
    int Ny = boxUcLims(1,1) - boxUcLims(1,0);
    int Nz = boxUcLims(2,1) - boxUcLims(2,0);

    idAtom = uccAtom(0); //ib
    idAtom += (uccAtom(1) - boxUcLims(0,0)) * nBasisAtoms; // ix * Nb
    idAtom += (uccAtom(2) - boxUcLims(1,0)) * nBasisAtoms * Nx;
    idAtom += (uccAtom(3) - boxUcLims(2,0)) * nBasisAtoms * Nx * Ny;

  }
  else{
    int ib, ix, iy, iz; // indices in order of precedence
    int Nx, Ny, Nz; // number of unit cells
    int maxId; // max id possible

    Nx = boxUcLims(0,1) - boxUcLims(0,0); // number of unit cells aling X
    Ny = boxUcLims(1,1) - boxUcLims(1,0); // number of unit cells along Y
    Nz = boxUcLims(2,1) - boxUcLims(2,0); // number of unit cells aling Z

    maxId = Nx * Ny * Nz * nBasisAtoms; // max id possible

    ib = idAtom % nBasisAtoms; // fastest changing index
    ix = (int) idAtom / nBasisAtoms; // next fastest index
    ix = (ix % Nx) + boxUcLims(0,0);
    iy = (int) idAtom / (nBasisAtoms * Nx);
    iy = (iy % Ny) + boxUcLims(1,0);
    iz = (int) idAtom / (nBasisAtoms * Nx * Ny);
    iz = (iz % Nz) + boxUcLims(2,0);

    uccAtom << ib, ix, iy, iz;
  }
}
*/
/**
   return the unit-coordinates of the atom
 **/
/*
void get_atom_uc(Atom& aatom, UnitCell& unit, Eigen::Vector3f& atomUc){
  atomUc << aatom.ucc(1), aatom.ucc(2), aatom.ucc(3);
  atomUc += unit.motif[aatom.ucc(0)];
}
*/
/**
   Use an atom's unit-cell coordinates to calculate its coordinates in real space
   The method accepts non-orthogonal unit-cells. However, it has not been tested
 **/
/*
void map_uc_real(Atom& aatom, UnitCell& unit){
  Eigen::Vector3f tmpUc;
  get_atom_uc( aatom, unit, tmpUc);
  aatom.coords = tmpUc(0) * unit.X + tmpUc(1) * unit.Y + tmpUc(2) * unit.Z;
}
*/


/**
   Create an edge dislocation with Burgers vector b = x, and n = z
   Atoms are not deleted to preserve fast id-ucc mapping.
   Instead their id is changed to -1 in which case they are not written out.
 **/
/*
int create_edge_xz(std::vector<Atom>& atomList, UnitCell& uc, Eigen::Matrix<float, 3, 3>& boxLims, Eigen::Matrix<int, 3,2>& boxUcLims){

}
*/
/**
   wrap atoms outside the box
**/
/*
void wrap_box(std::vector<Atom>& atomList, Eigen::Matrix<float,3,3>& boxLims){

  // calculate the box vectors
  Eigen::Vector3f boxX, boxY, boxZ;
  Eigen::Vector3f origin;

  boxX << boxLims(0,1) - boxLims(0,0), 0.0, 0.0;
  boxY << boxLims(0,2), boxLims(1,1) - boxLims(1,0), 0.0;
  boxZ << boxLims(1,2), boxLims(2,2), boxLims(2,1) - boxLims(2,0);

  Eigen::Matrix3f T; //transformation matrix
  T << boxX(0), boxY(0), boxZ(0), boxX(1), boxY(1), boxZ(1), boxX(2), boxY(2), boxZ(2);
  Eigen::Matrix3f invT;
  invT = T.inverse();

  origin << boxLims(0,0), boxLims(1,0), boxLims(2,0);

  Eigen::Vector3f rAtom;
  for (int i = 0; i < atomList.size(); ++i){
    rAtom = atomList[i].coords - origin; // calculate distance from origin (llc)
    rAtom = invT * rAtom; // 0 <= rAtom(i) < 1 // transform to box space
    for (int j = 0; j < 3; ++j){
      rAtom(j) -= floor(rAtom(j));  // return to central image
    }
    rAtom = T * rAtom; // return to standard space and shift
    rAtom = rAtom + origin;
  }
}
*/

/**
   Create a scew dislocation along xz
 **/
/*
int create_screw_xz(std::vector<Atom>& atomList, UnitCell& uc,
                    Eigen::Matrix<float, 3, 3>& boxLims, Eigen::Matrix<int, 3,2>& boxUcLims){

  wrap_box(atomList, boxLims);
  //
  int Nx = boxUcLims(0,1) - boxUcLims(0,0);
  int Ny = boxUcLims(1,1) - boxUcLims(1,0);
  int Nz = boxUcLims(2,1) - boxUcLims(2,0);

  // find the mid-plane along the Z-direction
  int midz = boxUcLims(2,1) + boxUcLims(2,0);
  if (midz % 2 != 0){
    midz++;
  }
  midz = (int)midz / 2;

  Eigen::Vector3f tlambda;
  Eigen::Vector3f tmu;
  Eigen::Vector3f origin;

  tlambda << -0.5*uc.X.norm(), (Ny+0.5)*uc.Y.norm(), 0.0;
  tmu << 0.5 * uc.X.norm(), (Ny + 0.5) * uc.Y.norm(), 0.0;
  origin << boxLims(0,0), boxLims(1,0), midz * uc.Z.norm();

  Eigen::Matrix<float, 3, 3> lambda;
  Eigen::Matrix<float, 3, 3> mu;

  // X-vector
  lambda.block<3,1>(0,0) << boxLims(0,1) - boxLims(0,0), 0.0, 0.0;
  mu.block<3,1>(0,0) << boxLims(0,1) - boxLims(0,0), 0.0, 0.0;
  // Y-vector
  lambda.block<3,1>(0,1) = tlambda;
  mu.block<3,1>(0,1) = tmu;
  // Z-vector
  lambda.block<3,1>(0,2) << 0.0, 0.0, boxLims(2,1) - origin(2);
  mu.block<3,1>(0,2) << 0.0, 0.0, origin(2) - boxLims(2,0);

  int nrm = 0;
  // loop over atoms and remove the ones that do not belong to mu or lambda
  Eigen::Matrix3f invLambda = lambda.inverse();
  Eigen::Matrix3f invMu = mu.inverse();
  Eigen::Vector3f dummyAtomLambda;
  Eigen::Vector3f dummyAtomMu;
  Eigen::Matrix3f eMu = Eigen::Matrix3f::Identity();
  Eigen::Matrix3f eLambda = Eigen::Matrix3f::Identity();

  eMu(0,1) = -0.5 * uc.X.norm() / mu.block<3, 1>(0, 1).norm();
  eLambda(0,1) = -eMu(0,1);

  for (int ia = 0; ia < atomList.size(); ++ia){
    dummyAtomLambda = atomList[ia].coords - origin;
    dummyAtomLambda = invLambda * dummyAtomLambda;

    dummyAtomMu = atomList[ia].coords - boxLims.block<3,1>(0,0);
    dummyAtomMu = invMu * dummyAtomMu;

    if (floor(dummyAtomLambda(2)) == 0){ //lambda-block
      if ( dummyAtomLambda(0) > 1){
        continue;
        atomList[ia]._id = -1;
        nrm++;
      }
    }
    else{
      if ( floor(dummyAtomMu(2)) != 0 ) { std::cout << "ERROR!!!!" << std::endl; }
      if ( dummyAtomMu(0) < 0. ){
        atomList[ia]._id = -1;
        nrm++;
      }
    }

    /*
    else{
      //atomList[ia]._id = -1;
      //nrm++;
      continue;
      if ( floor(dummyAtomMu(2)) == 0 ){ //mu block
        atomList[ia].coords = eMu * atomList[ia].coords;
      }
      else{
        if ( floor(dummyAtomLambda(2)) != 0) {std::cout << "ERROR!!!!" << std::endl;}
        atomList[ia].coords = eLambda * atomList[ia].coords;
      }
      }
    */
// }

  // shear the box
  //boxLims(1,1) -= 0.5 * uc.Y.norm();
  //return nrm;
//}

